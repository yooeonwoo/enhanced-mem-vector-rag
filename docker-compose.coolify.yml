# Enhanced Memory-Vector RAG - Coolify Optimized Configuration
# 클라우드 서비스 사용으로 최적화된 버전 (Qdrant Cloud, Neo4j Aura, Supabase Cloud)

services:
  # MCP Server - 메인 FastMCP 애플리케이션
  mcp-server:
    build:
      context: .
      dockerfile: emvr/deployment/dockerfiles/mcp-server.Dockerfile
    ports:
      - "8000"  # Coolify가 자동으로 외부 포트 할당
    environment:
      # 클라우드 데이터베이스 연결 (환경변수로 설정)
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      
      # API 키들
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - MEM0_API_KEY=${MEM0_API_KEY}
      
      # 모델 설정
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-BAAI/bge-small-en-v1.5}
      - LLM_MODEL=${LLM_MODEL:-o4-mini}
      
      # 서버 설정
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - MCP_SERVER_MODE=http  # Coolify에서는 HTTP 모드 사용
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # 보안
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - TOKEN_EXPIRY_MINUTES=${TOKEN_EXPIRY_MINUTES:-60}
      
      # 문서 처리
      - DEFAULT_CHUNK_SIZE=${DEFAULT_CHUNK_SIZE:-1000}
      - DEFAULT_CHUNK_OVERLAP=${DEFAULT_CHUNK_OVERLAP:-200}
      
      # Mem0 설정
      - USE_MEM0=${USE_MEM0:-true}
      - MEM0_MEMORY_ID=${MEM0_MEMORY_ID:-yoo-agent}
    volumes:
      - mcp_logs:/app/logs
      - models:/app/models
    restart: unless-stopped
    networks:
      - emvr-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # Chainlit UI - 웹 인터페이스
  chainlit-ui:
    build:
      context: .
      dockerfile: emvr/deployment/dockerfiles/chainlit-ui.Dockerfile
    ports:
      - "8501"  # Coolify가 자동으로 외부 포트 할당
    environment:
      - MCP_SERVER_URL=http://mcp-server:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ui_logs:/app/logs
      - uploads:/app/uploads
    depends_on:
      - mcp-server
    restart: unless-stopped
    networks:
      - emvr-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8501"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # Grafana - 모니터링 (일시적으로 비활성화)
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   networks:
  #     - emvr-network
  #   restart: unless-stopped

  # Prometheus - 메트릭 수집 (일시적으로 비활성화)
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090"
  #   volumes:
  #     - prometheus_data:/prometheus
  #   networks:
  #     - emvr-network
  #   restart: unless-stopped

networks:
  emvr-network:
    driver: bridge

volumes:
  mcp_logs:
    driver: local
  ui_logs:
    driver: local
  models:
    driver: local
  uploads:
    driver: local
  # grafana_data:
  #   driver: local
  # prometheus_data:
  #   driver: local